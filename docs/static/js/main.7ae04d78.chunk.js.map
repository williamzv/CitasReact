{"version":3,"sources":["Components/Agregarcita.js","Components/Header.js","Components/Cita.js","Components/ListaCitas.js","App.js","serviceWorker.js","index.js"],"names":["Agregarcita","nombreMascotaRef","React","createRef","propietarioRef","fechaRef","horaRef","sintomasRef","state","error","crearNuevaCita","e","preventDefault","nuevaCita","id","uuid","mascota","_this","current","value","propietario","fecha","hora","sintomas","props","crearCita","currentTarget","reset","setState","existeError","this","react_default","a","createElement","className","onSubmit","ref","type","placeholder","Component","Header","titulo","Cita","eliminarCita","borrarCita","info","_this$props$info","onClick","ListaCitas","citas","mensaje","Object","keys","length","map","cita","Components_Cita","key","App","crearCitaApp","concat","toConsumableArray","borrarCitaApp","filter","JSON","parse","localStorage","getItem","setItem","stringify","Components_Header","Components_Agregarcita","Components_ListaCitas","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ae04d78.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport uuid from 'uuid';\nimport PropTypes from 'prop-types';\n\nclass Agregarcita extends Component {\n    // refs\n    nombreMascotaRef = React.createRef();\n    propietarioRef = React.createRef();\n    fechaRef = React.createRef();\n    horaRef = React.createRef();\n    sintomasRef = React.createRef();\n\n    state = {\n        error: false\n    };\n    \n    crearNuevaCita = (e) => {\n        e.preventDefault();\n        \n        const nuevaCita = {\n            id: uuid(),\n            mascota: this.nombreMascotaRef.current.value,\n            propietario: this.propietarioRef.current.value,\n            fecha: this.fechaRef.current.value,\n            hora: this.horaRef.current.value,\n            sintomas: this.sintomasRef.current.value\n        };\n\n        if (nuevaCita.mascota === '' || nuevaCita.propietario === '' || nuevaCita.fecha === '' || nuevaCita.hora === '' || nuevaCita.sintomas === '') {\n            this.setState({error: true});\n            return;\n        }\n        // Ingresar la ciaa\n        this.props.crearCita(nuevaCita);\n        \n        // Reiniciar el formulario\n        e.currentTarget.reset();\n        this.setState({error: false});\n    };\n\n    render() {\n        const existeError = this.state.error;\n        return (\n            <div className=\"card mt-5\">\n                <div className=\"card-body\">\n                    <h2 className=\"card-title text-center mb-5\">Agrega las citas aquí</h2>\n                    <form onSubmit={this.crearNuevaCita}>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Mascota</label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <input ref={this.nombreMascotaRef} type=\"text\" className=\"form-control\" placeholder=\"Nombre Mascota\" />\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Dueño</label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <input ref={this.propietarioRef}  type=\"text\" className=\"form-control\"  placeholder=\"Nombre Dueño de la Mascota\" />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha</label>\n                            <div className=\"col-sm-8 col-lg-4  mb-4 mb-lg-0\">\n                                <input ref={this.fechaRef} type=\"date\" className=\"form-control\" />\n                            </div>                            \n\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora</label>\n                            <div className=\"col-sm-8 col-lg-4\">\n                                <input ref={this.horaRef} type=\"time\" className=\"form-control\" />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Sintomas</label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <textarea ref={this.sintomasRef}  className=\"form-control\"></textarea>\n                            </div>\n                        </div>\n                        <div className=\"form-group row justify-content-end\">\n                            <div className=\"col-sm-3\">\n                                <button type=\"submit\" className=\"btn btn-success w-150\">Agregar</button>\n                            </div>\n                        </div>\n                    </form> \n                    {existeError ? <div className=\"alert alert-danger text-center\">Todos los campos son obligatorios</div>: ''}           \n                </div>\n            </div>\n        )\n    }\n}\n\nAgregarcita.propTypes = {\n    crearCita: PropTypes.func.isRequired\n}\n\nexport default Agregarcita;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = props => {\n    return (\n        <header>\n            <h1 className=\"text-center\">{props.titulo}</h1>\n        </header>\n    )\n}\n\nHeader.propTypes = {\n    titulo: PropTypes.string.isRequired\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Cita extends Component {\n    eliminarCita = () => {\n        this.props.borrarCita(this.props.info.id);\n    };\n\n    render() {\n        const {fecha, hora, mascota, propietario, sintomas} = this.props.info;\n        return (\n            <div className=\"media mt-3\">\n                <div className=\"media-body\">\n                    <h3 className=\"mt-0\">{mascota}</h3>\n                    <p className=\"card-text\"><span>Nombre del dueño: </span>{propietario}</p>\n                    <p className=\"card-text\"><span>Fecha: </span>{fecha}</p>\n                    <p className=\"card-text\"><span>Hora: </span>{hora}</p>\n                    <p className=\"card-text\"><span>Síntomas: </span>{sintomas}</p>\n                    <button onClick={this.eliminarCita} className=\"btn btn-danger\">\n                        Borrar &times;\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nCita.propTypes = {\n    info: PropTypes.shape({\n        fecha: PropTypes.string.isRequired,\n        hora: PropTypes.string.isRequired,\n        mascota: PropTypes.string.isRequired,\n        propietario: PropTypes.string.isRequired,\n        sintomas: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired\n    }),\n    borrarCita: PropTypes.func.isRequired\n}\n\nexport default Cita\n","import React, {Component} from 'react';\nimport Cita from './Cita';\nimport PropTypes from 'prop-types';\n\nclass ListaCitas extends Component {\n    render() {\n        const citas = this.props.citas;\n        const mensaje = Object.keys(citas).length === 0 ? 'No hay citas': 'Administra tus citas aquí';\n\n        return (\n            <div className=\"card mt-5\">\n                <div className=\"card-body\">\n                    <h2 className=\"card-title text-center\">{mensaje}</h2>\n                    <div className=\"lista-citas\">\n                        {Object.keys(this.props.citas).map(cita => (\n                            <Cita key={cita} info={this.props.citas[cita]} borrarCita={this.props.borrarCita}/>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nListaCitas.propTypes = {\n    citas: PropTypes.array.isRequired,\n    borrarCita: PropTypes.func.isRequired\n}\n\nexport default ListaCitas;","import React, { Component } from 'react';\nimport Agregarcita from './Components/Agregarcita';\nimport Header from './Components/Header';\nimport ListaCitas from './Components/ListaCitas';\n\nclass App extends Component {\n  state = {\n    citas: []\n  };\n\n  componentDidMount() {\n    const citas = JSON.parse(localStorage.getItem('citas'));\n    if (citas) {\n      this.setState({citas});\n    }\n  }\n  \n  componentDidUpdate() {\n    localStorage.setItem('citas', JSON.stringify(this.state.citas));\n  }\n\n  crearCitaApp = (nuevaCita) => {\n    const citas = [...this.state.citas, nuevaCita]; // generamos una copia de citas y le agregamos la nuevaCita\n\n    this.setState({citas}); // Agregamos al State\n  };\n\n  borrarCitaApp = (id) => {\n    // Leer el State\n    const citasActuales = [...this.state.citas];\n    // Borrar el elemento del state\n    const citas = citasActuales.filter(cita => cita.id !== id);\n    // Actualizar el state\n    this.setState({citas});\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <Header titulo={'Administrador de Pacientes de Veterinaria'} />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Agregarcita crearCita={this.crearCitaApp} />\n          </div>\n          <div className=\"col-md-6\">\n            <ListaCitas citas={this.state.citas} borrarCita={this.borrarCitaApp} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}